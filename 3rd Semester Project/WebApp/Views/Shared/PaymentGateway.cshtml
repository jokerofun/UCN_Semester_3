@using Microsoft.AspNet.Identity;


<head>
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
    <script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
</head>

<div class="container">
    <div class='row'>
        <div class='col-md-4'></div>
        <div class='col-md-4'>
            <form accept-charset="UTF-8" class="require-validation" id="payment-form">
                <div class='form-row'>
                    <div class='col-xs-12 form-group required'>
                        <label class='control-label'>Name on Card</label>
                        <input class='form-control name-input' size='4' type='text' required>
                    </div>
                </div>
                <div class='form-row'>
                    <div class='col-xs-12 form-group card required'>
                        <label class='control-label'>Card Number</label>
                        <input autocomplete='off' class='form-control card-number number-only' size='20' type='text' minlength="12" maxlength="19" required pattern="^(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$">
                    </div>
                </div>
                <div class='form-row'>
                    <div class='col-xs-4 form-group cvc required'>
                        <label class='control-label'>CVC</label>
                        <input autocomplete='off' class='form-control card-cvc number-only' placeholder='ex. 311' size='4' type='text' minlength="3" maxlength="3" required pattern="[0-9]{3}">
                    </div>
                    <div class='col-xs-4 form-group expiration required'>
                        <label class='control-label'>Expiration</label>
                        <input class='form-control card-expiry-month number-only' placeholder='MM' size='2' type='text' minlength="2" maxlength="2" required pattern="0[1-9]|1[0-2]">
                    </div>
                    <div class='col-xs-4 form-group expiration required'>
                        <label class='control-label'> </label>
                        <input class='form-control card-expiry-year number-only' placeholder='YYYY' size='4' type='text' minlength="4" maxlength="4" required pattern="\b20(2[1-9]|2[0-5])\b">
                    </div>
                </div>
                <div class='form-row'>
                    <div class='col-md-12'>
                        <div class='form-control total btn btn-info'>
                            Total:
                            <span id="price" class='amount'> </span>
                        </div>
                    </div>
                </div>
                <div class='form-row'>
                    <div class='col-md-12 form-group'>
                        <button class='form-control btn btn-primary submit-button' type='submit'>Pay »</button>
                    </div>
                </div>
                <div class='form-row'>
                    <div class='col-md-12 error form-group hide'>
                        <div class='alert-danger alert'>
                            Please correct the errors and try again.
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <div class='col-md-4'></div>
    </div>
</div>

<style>
    .submit-button {
        margin-top: 10px;
    }

    .col-md-4 {
        padding-top: 25px;
    }
</style>

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")

<script>

            $(document).ready(function () {
                var price = localStorage.getItem('price');
                $('#price').text(price);
                localStorage.clear();
            });

            $(document).ready(function () {
                $(".number-only").inputFilter(function (value) {
                    return /^\d*$/.test(value);
                });
            });

        $(function() {
            $('form.require-validation').bind('submit', function (e) {
                event.preventDefault();
                var $form = $(e.target).closest('form'),
                    inputSelector = ['input[type=email]', 'input[type=password]',
                        'input[type=text]', 'input[type=file]',
                        'textarea'].join(', '),
                    $inputs = $form.find('.required').find(inputSelector),
                    $errorMessage = $form.find('div.error');

                $errorMessage.addClass('hide');
                $('.has-error').removeClass('has-error');
                $inputs.each(function (i, el) {
                    var $input = $(el);
                    if ($input.val() === '') {
                        $input.parent().addClass('has-error');
                        $errorMessage.removeClass('hide');
                    }
                });
                
                
                buy();
            });
        });

    function buy() {
                $.ajax({
                type: "GET",
                url: "/UserTickets/CompleteTransaction?userId=@User.Identity.GetUserId()",
                success: function () {
                    location.href = "/Home/Index";
                },
                failure: function () {
                    alert("The system failed in processing your transaction!");
                },
                error: function () {
                    alert("There was an error in processing your transaction!");
                }
            });

    };

    // Restricts input for the set of matched elements to the given inputFilter function.
    (function ($) {
        $.fn.inputFilter = function (inputFilter) {
            return this.on("input keydown keyup mousedown mouseup select contextmenu drop", function () {
                if (inputFilter(this.value)) {
                    this.oldValue = this.value;
                    this.oldSelectionStart = this.selectionStart;
                    this.oldSelectionEnd = this.selectionEnd;
                } else if (this.hasOwnProperty("oldValue")) {
                    this.value = this.oldValue;
                    this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
                } else {
                    this.value = "";
                }
            });
        };
    }(jQuery));


    $(function () {

        $('.name-input').keydown(function (e) {

            if (e.ctrlKey || e.altKey) {

                e.preventDefault();

            } else {

                var key = e.keyCode;

                if (!((key == 8) || (key == 32) || (key == 46) || (key >= 35 && key <= 40) || (key >= 65 && key <= 90))) {

                    e.preventDefault();

                }

            }

        });

    });

        //$(function () {
        //    var $form = $("#payment-form");

        //    $form.on('submit', function (e) {
        //        if (!$form.data('cc-on-file')) {
        //            e.preventDefault();
        //            Stripe.setPublishableKey($form.data('stripe-publishable-key'));
        //            Stripe.createToken({
        //                number: $('.card-number').val(),
        //                cvc: $('.card-cvc').val(),
        //                exp_month: $('.card-expiry-month').val(),
        //                exp_year: $('.card-expiry-year').val()
        //            }, stripeResponseHandler);
        //        }
        //    });

        //    function stripeResponseHandler(status, response) {
        //        if (response.error) {
        //            $('.error')
        //                .removeClass('hide')
        //                .find('.alert')
        //                .text(response.error.message);
        //        } else {
        //            // token contains id, last4, and card type
        //            var token = response['id'];
        //            // insert the token into the form so it gets submitted to the server
        //            $form.find('input[type=text]').empty();
        //            $form.append("<input type = 'hidden' name = 'reservation[stripe_token]' value = '" + token + "' /> ");
        //            $form.get(0).submit();
        //        }
        //    }
        //})

</script>

}